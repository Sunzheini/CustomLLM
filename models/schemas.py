from pydantic import BaseModel, Field
from typing import List


class Source(BaseModel):
    """Schema for a source used by the agent"""
    url: str = Field(description="URL of the source")


# class AgentResponse(BaseModel):
#     """Schema for the agent's response"""
#     answer: str = Field(description="The answer generated by the agent")
#     sources: List[Source] = Field(default_factory=list, description="List of sources used to generate the answer")


class Reflection(BaseModel):
    """Schema for the agent's reflection"""
    missing: str = Field(description="Critique of what is missing.")
    superfluous: str = Field(description="Critique of what is superfluous.")


class AnswerQuestion(BaseModel):
    """Answer the question."""
    answer: str = Field(description="~250 word detailed answer to the question.")
    reflection: Reflection = Field(description="Your reflection on the initial answer.")
    search_queries: List[str] = Field(description="1-3 search queries for researching improvements to address the critique of your current answer.")
    sources: List[Source] = Field(description="List of sources used to generate the answer.")
